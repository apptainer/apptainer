name: release
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release_assets:
    name: release_assets
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
      - run: git fetch --prune --unshallow --tags --force

      - name: Check if release is needed because tag matches latest annotated
        env:
          GITHUB_REF: ${{github.ref}}
        run: |
          GETVERSION="$(./scripts/get-version)"
          GITTAG="${GITHUB_REF#refs/tags/v*}"
          if [ "$GETVERSION" == "$GITTAG" ]
          then
            echo "do_release=true" >> $GITHUB_ENV
          else
            echo "Skipping because $GETVERSION did not match $GITTAG"
          fi

      - name: Make dist tarball and rpm packages
        if: env.do_release
        env:
          OS_TYPE: rockylinux
          OS_VERSION: 8
          HIDE_DIST: true
          GO_ARCH: linux-amd64
        run: |
          # Move the source directory down a level to separate it
          #  from later builds; the docker build runs privileged and
          #  changes the ownership of the files.
          set -x
          mkdir rpmdir
          shopt -s extglob
          mv .??* !(rpmdir) rpmdir
          cd rpmdir
          ./scripts/ci-docker-run
          cp *.tar.gz *.rpm ..
          cd ..

      - name: Make standard deb packages
        if: env.do_release
        env:
          OS_TYPE: debian
          OS_VERSION: 11
          GO_ARCH: linux-amd64
        run: |
          # Make a new copy of the source files for this build
          set -x
          tar xf apptainer-*.tar.gz
          cd `basename apptainer-*.tar.gz .tar.gz`
          ./scripts/ci-docker-run
          cp *.deb ..
          cd ..

      - name: Make trixie deb packages
        if: env.do_release
        env:
          OS_TYPE: debian
          # once released, this version should change to 13
          OS_VERSION: trixie
          GO_ARCH: linux-amd64
        run: |
          # Make another new copy of the source files for this build
          set -x
          sudo rm -rf `basename apptainer-*.tar.gz .tar.gz`
          tar xf apptainer-*.tar.gz
          cd `basename apptainer-*.tar.gz .tar.gz`
          ./scripts/ci-docker-run
          for d in *.deb; do cp $d ../`echo $d|sed 's/\(_[^_]*$\)/-trixie+\1/'`; done
          cd ..

      - name: Release
        if: env.do_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.rpm
            *.deb

  release_container_images:
    name: release_container_images
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release is needed because tag matches latest annotated
        env:
          GITHUB_REF: ${{github.ref}}
        run: |
          GETVERSION="$(./scripts/get-version)"
          GITTAG="${GITHUB_REF#refs/tags/v*}"
          if [ "$GETVERSION" == "$GITTAG" ]
          then
            echo "do_release=true" >> $GITHUB_ENV
            echo "git_tag=$GITTAG" >> $GITHUB_ENV
          else
            echo "Skipping because $GETVERSION did not match $GITTAG"
          fi

      - name: Set up qemu
        if: env.do_release
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: env.do_release
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        if: env.do_release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/apptainer/apptainer
          tags: |
            type=semver,pattern={{version}}

      - name: Login to ghcr.io
        if: env.do_release
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get golang version
        id: min-go-version
        run: echo "GOLANG_VERSION=$(scripts/get-min-go-version)" >> "$GITHUB_OUTPUT"

      - name: Build and push
        if: env.do_release
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'push tag' }}
          file: dist/docker/Dockerfile
          build-args: |
            VERSION=${{ env.git_tag }}
            GOLANG_VERSION=${{ steps.min-go-version.outputs.GOLANG_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
